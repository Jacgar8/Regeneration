buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

plugins {
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.matthewprenger.cursegradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'me.swirtzly' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.jar_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

configurations {
    include
}


repositories {
    maven { url 'https://jitpack.io' }
}

minecraft {
    mappings channel: "${mappings_type}", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                regeneration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                regeneration {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'regeneration', '--all', '--output', file('src/generated/resources/')

            mods {
                regeneration {
                    source sourceSets.main
                }
            }
        }
    }

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}


dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    compile fg.deobf('com.gitlab.Spectre0987:TardisMod-1-14:-SNAPSHOT')
    //compile fg.deobf("com.gitlab.Spectre0987:TardisMod-1-14:${tm_tag}") //Use stable version of Tardis Mod
}

curseforge {
    apiKey = rootProject.curseforge
    project {
        id = rootProject.regen
        changelog = 'Fixed issue where loot broke other mods chests. Fixed issue where players would be stranded on Gallifrey. Added Keyboard support to Screen GUI. Fixed TARDIS Mod Support (Supports 1.4.1 and 1.5.1 [When releases])'
        releaseType = 'release'
        mainArtifact(jar) {
            displayName = "[${minecraft_version}] Regeneration - $project.version"
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "regeneration",
                "Specification-Vendor"    : "Swirtzly",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Swirtzly",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}